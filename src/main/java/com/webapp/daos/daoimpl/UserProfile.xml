<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webapp.daos.UserProfileDao">
	
	<resultMap id="userProfileResultMap" type="UserProfileModel">

		<id property="userInfoId" column="user_info_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="phoneNo" column="phone_no" />
		<result property="phoneNoCode" column="phone_no_code" />
		<result property="drivingLicense" column="driving_license" />
		<result property="joiningDate" column="joining_date" />
		<result property="mailAddressLineOne" column="mail_address_line_1" />
		<result property="mailAddressLineTwo" column="mail_address_line_2" />
		<result property="mailCountryId" column="mail_country_id" />
		<result property="mailStateId" column="mail_state_id" />
		<result property="mailCityId" column="mail_city_id" />
		<result property="mailZipCode" column="mail_zip_code" />
		<result property="billAddressLineOne" column="bill_address_line_1" />
		<result property="billAddressLineTwo" column="bill_address_line_2" />
		<result property="billCountryId" column="bill_country_id" />
		<result property="billStateId" column="bill_state_id" />
		<result property="billCityId" column="bill_city_id" />
		<result property="billZipCode" column="bill_zip_code" />
		<result property="gender" column="gender" />
		<result property="userId" column="user_id" />
		<result property="createdBy" column="created_by" />
		<result property="createdAt" column="created_at" />
		<result property="updatedBy" column="updated_by" />
		<result property="updatedAt" column="updated_at" />
		<result property="cardType" column="card_type" />
		<result property="accountNumber" column="account_number" />
		<result property="roleId" column="role_id" />
		<result property="userRole" column="userRole" />
		<result property="email" column="email" />
		<result property="password" column="password" />
		<result property="photoUrl" column="photo_url" />
		<result property="isActive" column="is_active" />
		<result property="isDeleted" column="is_deleted" />
		<result property="isNotificationStatus" column="is_notification_send_status" />
		<result property="isOnDuty" column="is_on_duty" />
		<result property="fullName" column="fullName" />
		<result property="tip" column="tip" />
		<result property="verificationCode" column="verification_code" />
		<result property="isVerified" column="is_verified" />
		<result property="isSameAsMailing" column="is_same_as_mailing" />
		<result property="companyName" column="company_name" />
		<result property="companyAddress" column="company_address" />
		<result property="isApprovelStatus" column="approvel_status" />
		
		<result property="credit" column="credit" />
		<result property="referralCode" column="referral_code" />
		
		<result property="isFirstTime" column="is_first_time" />
		
		<result property="isCardAvailable" column="card_available" />
		
		<result property="rideLaterVisitedTime" column="ride_later_visited_time" />
		
		<result property="driveTransmissionTypeId" column="drive_transmission_type_id" />
		
		<result property="maximumMarkupFare" column="maximum_markup_fare" />
		<result property="isVendorDriverSubscriptionAppliedInBookingFlow" column="is_vendor_driver_subscription_applied_in_booking_flow" />
		
		<result property="vendorBrandName" column="vendor_brand_name" />
		<result property="vendorBrandImage" column="vendor_brand_image" />
		<result property="vendorBrandSearchKeywords" column="vendor_brand_search_keywords" />
		<result property="vendorStoreId" column="vendor_store_id" />
		<result property="storeName" column="store_name" />
		<result property="storeAddress" column="store_address" />
		<result property="storeAddressLat" column="store_address_lat" />
		<result property="storeAddressLng" column="store_address_lng" />
		<result property="storeImage" column="store_image" />
		<result property="isClosedToday" column="is_closed_today" />
		<result property="dateType" column="date_type" />
		<result property="startDate" column="start_date" />
		<result property="endDate" column="end_date" />
		<result property="dateOpeningMorningHours" column="date_opening_morning_hours" />
		<result property="dateClosingMorningHours" column="date_closing_morning_hours" />
		<result property="dateOpeningEveningHours" column="date_opening_evening_hours" />
		<result property="dateClosingEveningHours" column="date_closing_evening_hours" />
		<result property="day" column="day" />
		<result property="openingMorningHours" column="opening_morning_hours" />
		<result property="closingMorningHours" column="closing_morning_hours" />
		<result property="openingEveningHours" column="opening_evening_hours" />
		<result property="closingEveningHours" column="closing_evening_hours" />
		
		<result property="distance" column="distance" />
		<result property="serviceName" column="service_name" />
		<result property="categoryName" column="category_name" />
		<result property="categoryId" column="category_id" />
		<result property="serviceId" column="service_id" />
		<result property="isVendorStoreSubscribed" column="isVendorStoreSubscribed" />
	    
	    <result property="isDriverSubscribed" column="isDriverSubscribed" />
	    <result property="driverPriorityNumber" column="driverPriorityNumber" />
	    
	    <result property="vendorMonthlySubscriptionFee" column="vendor_monthly_subscription_fee" />
	    <result property="isVendorSubscriptionFreeActive" column="is_vendor_subscription_free_active" />
	    <result property="isVendorSubscriptionCurrentActive" column="is_vendor_subscription_current_active" />
	    <result property="vendorFreeSubscriptionStartDateTime" column="vendor_free_subscription_start_date_time" />
	    <result property="vendorFreeSubscriptionEndDateTime" column="vendor_free_subscription_end_date_time" />
	    <result property="vendorCurrentSubscriptionStartDateTime" column="vendor_current_subscription_start_date_time" />
	    <result property="vendorCurrentSubscriptionEndDateTime" column="vendor_current_subscription_end_date_time" />
	    <result property="vendorMonthlySubscriptionHistoryId" column="vendor_monthly_subscription_history_id" />
	    <result property="isVendorSubscriptionMarkedExpiredByCronJob" column="is_vendor_subscription_marked_expired_by_cronjob" />
	    <result property="vendorSubscriptionMarkedExpiredByCronJobTiming" column="vendor_subscription_marked_expired_by_cronjob_timing" />
	    
	    <result property="isSelfDeliveryWithinXKm" column="is_self_delivery_within_x_km" />
	    <result property="selfDeliveryFee" column="self_delivery_fee" />
	    
	    <result property="phonepeMerchantId" column="phonepe_merchant_id" />
	    <result property="phonepeMerchantName" column="phonepe_merchant_name" />
	    <result property="saltKey" column="salt_key" />
	    <result property="saltIndex" column="salt_index" />
	    
	    <result property="dob" column="dob" />
		
	</resultMap>
	
	<sql id="vendorNewColumns">
		UI.vendor_brand_name, UI.vendor_brand_image, UI.vendor_brand_search_keywords,
		UI.vendor_monthly_subscription_fee, UI.is_vendor_subscription_free_active, 
		UI.is_vendor_subscription_current_active, UI.vendor_free_subscription_start_date_time, 
		UI.vendor_free_subscription_end_date_time, UI.vendor_current_subscription_start_date_time, 
		UI.vendor_current_subscription_end_date_time, UI.vendor_monthly_subscription_history_id,
		UI.is_vendor_subscription_marked_expired_by_cronjob, UI.vendor_subscription_marked_expired_by_cronjob_timing,
		UI.is_self_delivery_within_x_km, UI.self_delivery_fee, UI.phonepe_merchant_id, UI.phonepe_merchant_name,
		UI.salt_key, UI.salt_index
	</sql>
	
	<sql id="vendorStoreColumns">
		vs.vendor_store_id, vs.store_name, vs.store_address, vs.store_address_lat, 
		vs.store_address_lng, vs.date_type, vs.start_date, vs.end_date, 
		vs.date_opening_morning_hours, vs.date_closing_morning_hours,
		vs.date_opening_evening_hours, vs.date_closing_evening_hours, 
		vs.is_closed_today, vs.store_image
	</sql>
	
	<sql id="vendorStoreTimingsColumns">
		vst.day, vst.opening_morning_hours, vst.closing_morning_hours, 
        vst.opening_evening_hours, vst.closing_evening_hours
	</sql>
	
	<insert id="addUser" keyColumn="user_id" useGeneratedKeys="true" parameterType="UserProfileModel">

		INSERT INTO user_info
				(
					user_info_id,first_name,last_name,phone_no,phone_no_code,
					driving_license,joining_date,mail_address_line_1,mail_address_line_2,
					mail_country_id,mail_state_id,mail_city_id,mail_zip_code,
					bill_address_line_1,bill_address_line_2,bill_country_id,bill_state_id,
					bill_city_id,bill_zip_code,gender,user_id,
					created_by,created_at,updated_by,updated_at,
					card_type,account_number,tip,is_same_as_mailing,
					company_name, company_address, referral_code,card_available
				)
		VALUES
				(
					#{userInfoId},#{firstName},#{lastName},#{phoneNo},#{phoneNoCode},
					#{drivingLicense},#{joiningDate},#{mailAddressLineOne},#{mailAddressLineTwo},
					#{mailCountryId},#{mailStateId},#{mailCityId},#{mailZipCode},
					#{billAddressLineOne},#{billAddressLineTwo},#{billCountryId},#{billStateId},
					#{billCityId},#{billZipCode},#{gender},#{userId},
					#{createdBy},#{createdAt},#{updatedBy},#{updatedAt},
					#{cardType},#{accountNumber},#{tip},#{isSameAsMailing},
					#{companyName}, #{companyAddress}, #{referralCode},#{isCardAvailable}
				)
				
	</insert>
	
	<insert id="insertAdminUser" parameterType="UserProfileModel">

		INSERT INTO user_info
				(
					user_info_id, first_name, last_name, mail_address_line_1,mail_address_line_2,phone_no,
					mail_country_id, mail_state_id, mail_city_id, mail_zip_code,user_id,gender, 
					created_by,created_at,updated_by,updated_at, phone_no_code,maximum_markup_fare,
					vendor_brand_name, vendor_brand_image, vendor_brand_search_keywords,
					vendor_monthly_subscription_fee, is_vendor_subscription_free_active, 
					is_vendor_subscription_current_active, vendor_free_subscription_start_date_time, 
					vendor_free_subscription_end_date_time, vendor_current_subscription_start_date_time, 
					vendor_current_subscription_end_date_time, vendor_monthly_subscription_history_id,
					is_self_delivery_within_x_km, self_delivery_fee, phonepe_merchant_id, phonepe_merchant_name,
					salt_key, salt_index
				)
		VALUES
				(
					#{userInfoId}, #{firstName}, #{lastName}, #{mailAddressLineOne},#{mailAddressLineTwo},#{phoneNo},
					#{mailCountryId}, #{mailStateId}, #{mailCityId},#{mailZipCode}, #{userId},#{gender},
					#{createdBy},#{createdAt},#{updatedBy},#{updatedAt},#{phoneNoCode},#{maximumMarkupFare},
					#{vendorBrandName},#{vendorBrandImage},#{vendorBrandSearchKeywords},
					#{vendorMonthlySubscriptionFee}, #{isVendorSubscriptionFreeActive},
					#{isVendorSubscriptionCurrentActive}, #{vendorFreeSubscriptionStartDateTime},
					#{vendorFreeSubscriptionEndDateTime}, #{vendorCurrentSubscriptionStartDateTime},
					#{vendorCurrentSubscriptionEndDateTime}, #{vendorMonthlySubscriptionHistoryId},
					#{isSelfDeliveryWithinXKm}, #{selfDeliveryFee}, #{phonepeMerchantId}, #{phonepeMerchantName},
					#{saltKey}, #{saltIndex}
				)
				
	</insert>
	
	<select id="getUserAccountDetailsById" parameterType="String" resultMap="userProfileResultMap">
		
	    SELECT 
	    	U.user_id,U.email,U.photo_url,U.password,U.is_notification_send_status,U.is_on_duty, 
	    	UI.first_name,UI.last_name,UI.gender,U.role_id,
	    	UI.driving_license,UI.phone_no,UI.phone_no_code,UI.user_info_id,UI.mail_zip_code,
	    	UI.card_type,UI.account_number,concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.mail_address_line_1,UI.mail_address_line_2,UI,company_name, UI.company_address,
			UI.mail_country_id,UI.mail_state_id,UI.mail_city_id,UI.mail_zip_code,
			UI.bill_address_line_1,UI.bill_address_line_2,UI.bill_country_id,UI.bill_state_id,
			UI.bill_city_id,UI.bill_zip_code,UI.tip,U.is_active,UI.is_same_as_mailing,
			UI.created_by, UI.created_at, UI.updated_by, UI.updated_at, UI.ride_later_visited_time,
	    	R.role as userRole, UI.credit, UI.referral_code, UI.is_first_time,U.approvel_status,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow, UI.dob,
	    	<include refid="vendorNewColumns"></include>
		FROM 
			users U 
		INNER JOIN user_info UI ON UI.user_id=U.user_id
		INNER JOIN roles R ON R.role_id=U.role_id
		WHERE 
			U.user_id = #{userId} 
		AND 
			U.is_deleted='FALSE' 
			
 	</select>
 	
 	<select id="getAdminUserAccountDetailsById" parameterType="String" resultMap="userProfileResultMap">
		
	    SELECT 
	    	U.user_id,U.email,U.photo_url,U.password,U.is_notification_send_status,U.is_on_duty, U.role_id,
	    	UI.first_name,UI.last_name,UI.gender,
	    	UI.driving_license,UI.phone_no,UI.phone_no_code,UI.user_info_id,UI.mail_zip_code,
	    	UI.card_type,UI.account_number,concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.mail_address_line_1,UI.mail_address_line_2,UI,company_name, UI.company_address,
			UI.mail_country_id,UI.mail_state_id,UI.mail_city_id,UI.mail_zip_code,
			UI.bill_address_line_1,UI.bill_address_line_2,UI.bill_country_id,UI.bill_state_id,
			UI.bill_city_id,UI.bill_zip_code,UI.tip,U.is_active,UI.is_same_as_mailing,
			UI.created_by, UI.created_at, UI.updated_by, UI.updated_at, UI.ride_later_visited_time,
	    	R.role as userRole, UI.credit, UI.referral_code, UI.is_first_time, UI.maximum_markup_fare,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
		FROM 
			users U 
		INNER JOIN user_info UI ON UI.user_id=U.user_id
		INNER JOIN roles R ON R.role_id=U.role_id
		WHERE 
			U.user_id = #{userId} 
			
 	</select>

	<update id="updatePassenger" parameterType="UserProfileModel">
	
		UPDATE 
			user_info 
		SET 
			first_name = #{firstName}, 
			last_name = #{lastName}, 
			phone_no = #{phoneNo}, 
			phone_no_code = #{phoneNoCode},
			updated_by = #{updatedBy}, 
			updated_at = #{updatedAt},
			gender = #{gender},
			dob = #{dob}
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<!-- 	not used -->
	<select id="getUserListByRole" parameterType="map" resultMap="userProfileResultMap">
		SELECT 
		 	U.user_id, U.email, U.photo_url, 
		 	concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.phone_no, UI.phone_no_code, UI.driving_license, UI.credit, UI.referral_code, UI.is_first_time,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
	    FROM
	   		users U 
   		INNER JOIN user_info UI ON UI.user_id=U.user_id
		WHERE 		  	
        	(UI.first_name ilike #{searchKey} OR UI.last_name ilike #{searchKey} )
        AND 
        	U.role_id = #{roleId}
<!--         AND  -->
<!--         	U.is_deleted='FALSE'  -->
        ORDER BY 
        	U.updated_at DESC
       	LIMIT #{recordOffset}
       	OFFSET #{startOffSet}
	</select>
	
	<select id="getAllUsersByRoleId" parameterType="map" resultMap="userProfileResultMap">
	
		SELECT 
		 	U.user_id, U.email, U.photo_url, 
		 	concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.phone_no, UI.phone_no_code, UI.driving_license, UI.credit, UI.referral_code, UI.is_first_time,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
	    FROM
	   		users U 
   		INNER JOIN 
   			user_info UI 
   		ON 
   			UI.user_id=U.user_id
		WHERE 		  	
        	
        	U.role_id = #{roleId}
        AND 
        	U.is_deleted='FALSE' 
       
	</select>
	
	<!-- Specifically for scripts -->
	<select id="getUserIdByRoleId" parameterType="map" resultMap="userProfileResultMap">
	
		SELECT 
		 	U.user_id, <include refid="vendorNewColumns"></include>
	    FROM
	   		users U 
   		INNER JOIN user_info UI ON UI.user_id=U.user_id
		WHERE 		  	
        	U.role_id = #{roleId}
       
	</select>
	
	<select id="getBOUsersByRoleId" parameterType="map" resultMap="userProfileResultMap">
		SELECT 
		 	U.user_id, U.email, U.photo_url, UI,company_name, UI.company_address,
		 	concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.phone_no, UI.phone_no_code, UI.driving_license, UI.credit, UI.referral_code, UI.is_first_time,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
	    FROM
	   		users U 
   		INNER JOIN 
   			user_info UI 
   		ON 
   			UI.user_id=U.user_id
		WHERE 		  	
        	U.role_id = #{roleId}
<!--         AND  -->
<!--         	U.is_deleted='FALSE'  -->
       
	</select>
	
	<!-- 	not used -->
	<select id="getUserDetailsByRole" parameterType="String" resultMap="userProfileResultMap">
	
		SELECT 
		 	U.user_id, UI.first_name, UI.last_name, U.email,UI,company_name, UI.company_address,
	    	UI.phone_no, UI.phone_no_code, UI.driving_license, UI.mail_address_line_1, UI.mail_address_line_2,
	    	UI.mail_country_id, UI.mail_state_id, UI.mail_city_id, UI.mail_zip_code,
	    	UI.bill_address_line_1, UI.bill_address_line_2, UI.bill_country_id, UI.bill_state_id,
	    	UI.bill_city_id, UI.bill_zip_code,UI.card_type, UI.account_number,UI.is_same_as_mailing, UI.ride_later_visited_time,
	    	UI.created_by, UI.created_at, UI.updated_by, UI.updated_at, UI.credit, UI.referral_code, UI.is_first_time,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
	    FROM
	   		users U 
   		INNER JOIN user_info UI ON UI.user_id=U.user_id
		WHERE 
        	U.role_id = #{roleId}
<!--         AND  -->
<!--         	U.is_deleted='FALSE'  -->
        ORDER BY 
        	U.updated_at DESC
       	LIMIT 1
	</select>
	
	<update id="updateTip" parameterType="UserProfileModel">
		UPDATE 
			user_info 
			
		SET 
			tip = #{tip}, 
			updated_by = #{updatedBy}, 
			updated_at = #{updatedAt}
			
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<update id="updateAdminUserInfo" parameterType="UserProfileModel">
	
		UPDATE 
			user_info 
		SET 
			first_name = #{firstName}, 
			last_name = #{lastName}, 
			phone_no = #{phoneNo},
			phone_no_code = #{phoneNoCode}, 
			mail_address_line_1 = #{mailAddressLineOne}, 
			mail_state_id = #{mailStateId}, 
			mail_city_id = #{mailCityId}, 
			updated_by = #{updatedBy}, 
			updated_at = #{updatedAt},
			maximum_markup_fare = #{maximumMarkupFare},
			vendor_brand_name = #{vendorBrandName},
			vendor_brand_image = #{vendorBrandImage},
			vendor_brand_search_keywords = #{vendorBrandSearchKeywords},
			vendor_monthly_subscription_fee = #{vendorMonthlySubscriptionFee},
			is_self_delivery_within_x_km = #{isSelfDeliveryWithinXKm},
			self_delivery_fee = #{selfDeliveryFee},
			phonepe_merchant_id = #{phonepeMerchantId},
			phonepe_merchant_name = #{phonepeMerchantName},
			salt_key = #{saltKey},
			salt_index = #{saltIndex}
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<update id="updateVerificationCodeForPassenger" parameterType="map"  > 	
	
		UPDATE 
			user_info 
		SET 
			verification_code = #{verificationCode}
		WHERE 
			user_id=#{userId}
			
	</update>
	
	<update id="updateVerificationStatus" parameterType="UserProfileModel">
	
		UPDATE 
			user_info 
		SET 
			is_verified = #{isVerified},
			is_first_time = #{isFirstTime},  
			updated_by = #{updatedBy}, 
			updated_at = #{updatedAt}
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<select id="getVerificationCodeOfUser" parameterType="String" resultType="String">
	
		SELECT 
			verification_code 
		FROM 
			user_info
		WHERE  
			user_id = #{userId}
			
	</select>
	
	<select id="getUserDetailsByReferralCode" parameterType="String" resultMap="userProfileResultMap">
		
	    SELECT 
	    	user_id, credit, referral_code
		FROM 
			user_info 
		WHERE 
			referral_code = #{referralCode}
			 
 	</select>
 	
 	<update id="updateUserCredits" parameterType="UserProfileModel">
 	
		UPDATE 
			user_info 
		SET 
			credit = #{credit}
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<select id="getTotalCredits" resultType="double">
	
		SELECT 
			COALESCE(sum(credit), 0)
		FROM 
			user_info
			
	</select>
	
	<update id="updateCardAvailableStatus" parameterType="map">
	
		UPDATE
			user_info
		SET
			card_available = #{isCardAvailable}
		WHERE
			user_id = #{userId}
			
	</update>
	
	<update id="updateUserBillingAddressDetails" parameterType="UserProfileModel">
	
		UPDATE 
			user_info 
		SET 
			bill_address_line_1 = #{billAddressLineOne},
			<if test="billAddressLineTwo != null">
			bill_address_line_2 = #{billAddressLineTwo},
			</if>
			bill_country_id = #{billCountryId},
			bill_state_id = #{billStateId},
			bill_city_id = #{billCityId},
			bill_zip_code = #{billZipCode},
			updated_by = #{updatedBy}, 
			updated_at = #{updatedAt}
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<select id="getRideLaterDriverListCount" resultType="int"> 		
		
	    SELECT 
			count(u.user_id)
		FROM 
			users u
		INNER JOIN user_info ui ON ui.user_id = u.user_id
		INNER JOIN user_account UA ON UA.user_id = u.user_id
		INNER JOIN driver_vendors DV ON DV.driver_id = u.user_id
		INNER JOIN user_info DVUI ON DVUI.user_id = DV.vendor_id
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow!=null">
        INNER JOIN driver_subscription_package_history dsph 
        	ON 
        	(
        		dsph.driver_id = u.user_id
        	<if test="vendorId!=null">
        	AND
        		dsph.vendor_id = #{vendorId}
        	</if>
        	AND
        		dsph.package_start_time &lt;= #{time}
        	AND
        		dsph.package_end_time &gt;= #{time}
        	)
		</if>
		WHERE 
			u.role_id = #{driverRoleId}
		AND
			u.is_active = 'true' 
		AND
			u.is_on_duty = 'true'
		<if test="vendorId != null">
        AND
        	DV.vendor_id = #{vendorId}
        </if>
		<if test="isRestrictDriverVendorSubscriptionExpiry!=null">
		AND
			DVUI.is_vendor_subscription_current_active = true 
		</if>
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow==null">
		AND
			UA.current_balance &gt;= #{minimumWalletAmount}
		</if>
		AND
			u.user_id NOT IN(SELECT driver_id from driver_tour_requests WHERE tour_id = #{tourId})
		AND
			u.user_id IN 
				(
					SELECT
						DG.driver_id
					FROM 
						driver_gps DG 
					INNER JOIN users U ON U.user_id = DG.driver_id
					INNER JOIN user_info UI ON UI.user_id = DG.driver_id
					LEFT JOIN driver_tour_status DTS ON DTS.driver_id = DG.driver_id
					INNER JOIN driver_car_types DCT  ON  DCT.driver_id = DG.driver_id 
					WHERE 
					    DCT.car_type_id = #{carTypeId}
					AND
						is_on_duty = TRUE
					ORDER BY  
						${distance} ASC, DG.driver_id 
				)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = true
				AND
					ride_later_pickup_time &gt;= #{driverTripBeforeTime}
				AND
					ride_later_pickup_time &lt;= #{driverTripAfterTime}
				AND
					is_tour_ride_later = true
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = false
				AND
					created_at &gt;= #{driverTripBeforeTime}
				AND
					created_at &lt;= #{driverTripAfterTime}
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
		<if test="transmissionTypeIdList != null">
			AND
	    		ui.drive_transmission_type_id IN	    		
	    		<foreach item="item" index="index" collection="transmissionTypeIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
		</if>
	</select>
	
	<select id="getRideLaterDriverListBySearch" resultMap="userProfileResultMap">
		
		SELECT 
			u.user_id,u.email,UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,
			u.created_at,u.updated_at, u.photo_url,u.is_active,
			UI.credit, UI.referral_code, UI.is_first_time,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
			<include refid="vendorNewColumns"></include>			   
		FROM 
			users u
		INNER JOIN user_info ui ON UI.user_id = u.user_id
		INNER JOIN user_account UA ON UA.user_id = UI.user_id
		INNER JOIN driver_vendors DV ON DV.driver_id = u.user_id
		INNER JOIN user_info DVUI ON DVUI.user_id = DV.vendor_id
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow!=null">
        INNER JOIN driver_subscription_package_history dsph 
        	ON 
        	(
        		dsph.driver_id = u.user_id
        	<if test="vendorId!=null">
        	AND
        		dsph.vendor_id = #{vendorId}
        	</if>
        	AND
        		dsph.package_start_time &lt;= #{time}
        	AND
        		dsph.package_end_time &gt;= #{time}
        	)
		</if>
        WHERE  
            (
             		u.email iLIKE #{globalSearchString} 
               	OR 
               		UI.first_name iLIKE #{globalSearchString} 
		 		OR 
		 			UI.last_name iLIKE #{globalSearchString}
		 		OR 
		 			UI.company_name iLIKE #{globalSearchString} 
		 		OR 
		 			UI.company_address iLIKE #{globalSearchString}  
		 		OR 
		 			UI.phone_no iLIKE #{globalSearchString}
		 		OR 
		 			CONCAT(UI.first_name,CONCAT(' ',UI.last_name)) iLIKE #{globalSearchString} 
		 	) 
		AND 
			u.role_id = #{driverRoleId}
		AND
			u.is_active = 'true' 
		AND
			u.is_on_duty = 'true'
		<if test="vendorId != null">
        AND
       		DV.vendor_id = #{vendorId} 
        </if>
		<if test="isRestrictDriverVendorSubscriptionExpiry!=null">
		AND
			DVUI.is_vendor_subscription_current_active = true 
		</if>
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow==null">
		AND
			UA.current_balance &gt;= #{minimumWalletAmount}
		</if>
		AND
			u.user_id NOT IN(SELECT driver_id from driver_tour_requests WHERE tour_id = #{tourId})
		AND
			u.user_id IN 
				(
					SELECT
						DG.driver_id
					FROM 
						driver_gps DG 
					INNER JOIN users U ON U.user_id = DG.driver_id
					INNER JOIN user_info TUI ON TUI.user_id = DG.driver_id
					LEFT JOIN driver_tour_status DTS ON DTS.driver_id = DG.driver_id
					INNER JOIN driver_car_types DCT  ON  DCT.driver_id = DG.driver_id 
					
<!-- 					INNER JOIN car_drivers CD ON CD.driver_id = DG.driver_id -->
<!-- 					INNER JOIN cars C ON C.car_id = CD.car_id -->
					
					WHERE 
					    DCT.car_type_id = #{carTypeId}
					AND
						is_on_duty = TRUE
					ORDER BY  
						${distance} ASC, DG.driver_id 
				)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = true
				AND
					ride_later_pickup_time &gt;= #{driverTripBeforeTime}
				AND
					ride_later_pickup_time &lt;= #{driverTripAfterTime}
				AND
					is_tour_ride_later = true
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = false
				AND
					created_at &gt;= #{driverTripBeforeTime}
				AND
					created_at &lt;= #{driverTripAfterTime}
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					T.driver_id
				FROM 
					tours T
				INNER JOIN rental_packages RP ON (RP.rental_package_id = T.rental_package_id)
				
				WHERE
					T.is_rental_booking = true
				AND
					T.created_at &gt;= #{driverTripBeforeTime}
				AND
					T.created_at &lt;= #{tourPickupTime} + ((RP.package_time * 60) * 1000)
				AND
					T.driver_id = u.user_id
				AND
					T.tour_id != #{tourId}
			)
			
		<if test="transmissionTypeIdList != null">
			AND
	    		UI.drive_transmission_type_id IN	    		
	    		<foreach item="item" index="index" collection="transmissionTypeIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
		</if>
		ORDER BY u.updated_at DESC
       	LIMIT #{recordOffset} OFFSET #{startOffSet}         
        
	</select>
	
	<update id="updateRideLaterVisitedTime" parameterType="UserProfileModel">
	
		UPDATE 
			user_info 
		SET 
			ride_later_visited_time = #{rideLaterVisitedTime}
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<update id="updateReferralCode" parameterType="UserProfileModel">
	
		UPDATE 
			user_info 
			
		SET 
			referral_code = #{referralCode}, 
			updated_by = #{updatedBy}, 
			updated_at = #{updatedAt}
			
		WHERE  
			user_id = #{userId}
			
	</update>
	
	<select id="getSenderListByReferralCode" parameterType="String" resultMap="userProfileResultMap">
	
		SELECT 
		 	U.user_id, U.email, U.role_id, 
		 	concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.phone_no, UI.phone_no_code, UI.credit, UI.referral_code, UI.is_first_time,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
	    FROM
	   		user_info UI 
	   		 
   		INNER JOIN 
   				users U 
   		ON 
   				U.user_id = UI.user_id
   		
		WHERE 		  	
        	UI.referral_code = #{referralCode}
        AND
        	UI.is_verified = true
        AND
        	U.is_deleted = false
        	
	</select>
	
	<select id="getDriverListForManualBookingRideLater" resultMap="userProfileResultMap">
	
		SELECT 
			u.user_id, u.email, UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,
			u.created_at,u.updated_at, u.photo_url,u.is_active,
			UI.credit, UI.referral_code, UI.is_first_time,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>	
		FROM 
			users u
		INNER JOIN user_info ui ON UI.user_id = u.user_id
		INNER JOIN user_account UA ON UA.user_id = UI.user_id
		INNER JOIN driver_vendors DV ON DV.driver_id = u.user_id
		INNER JOIN user_info DVUI ON DVUI.user_id = DV.vendor_id
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow!=null">
        INNER JOIN driver_subscription_package_history dsph 
        	ON 
        	(
        		dsph.driver_id = DG.driver_id
			<if test="vendorId != null">
        	AND
        		dsph.vendor_id = #{vendorId}
        	</if>
        	AND
        		dsph.package_start_time &lt;= #{time}
        	AND
        		dsph.package_end_time &gt;= #{time}
        	)
		</if>
        WHERE  
			u.role_id = #{driverRoleId}
		AND
			u.is_active = 'true' 
		AND
			u.is_on_duty = 'true'
		<if test="isRestrictDriverVendorSubscriptionExpiry!=null">
		AND
			DVUI.is_vendor_subscription_current_active = true 
		</if>
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow==null">
		AND
			UA.current_balance &gt;= #{minimumWalletAmount}
		</if>
		AND
			u.user_id IN 
				(
					SELECT
						DG.driver_id
					FROM 
						driver_gps DG 
					INNER JOIN users U ON U.user_id = DG.driver_id
					INNER JOIN user_info TUI ON TUI.user_id = DG.driver_id
					LEFT JOIN driver_tour_status DTS ON DTS.driver_id = DG.driver_id
					INNER JOIN driver_car_types DCT  ON  DCT.driver_id = DG.driver_id 
					
<!-- 					INNER JOIN car_drivers CD ON CD.driver_id = DG.driver_id -->
<!-- 					INNER JOIN cars C ON C.car_id = CD.car_id -->
					
					WHERE 
					    DCT.car_type_id = #{carTypeId}
					AND
						is_on_duty = TRUE
					ORDER BY  
						${distance} ASC, DG.driver_id 
				)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = true
				AND
					ride_later_pickup_time &gt;= #{driverTripBeforeTime}
				AND
					ride_later_pickup_time &lt;= #{driverTripAfterTime}
				AND
					is_tour_ride_later = true
				AND
					driver_id = u.user_id
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = false
				AND
					created_at &gt;= #{driverTripBeforeTime}
				AND
					created_at &lt;= #{driverTripAfterTime}
				AND
					driver_id = u.user_id
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					T.driver_id
				FROM 
					tours T
				INNER JOIN rental_packages RP ON (RP.rental_package_id = T.rental_package_id)
				
				WHERE
					T.is_rental_booking = true
				AND
					T.created_at &gt;= #{driverTripBeforeTime}
				AND
					T.created_at &lt;= #{tourPickupTime} + ((RP.package_time * 60) * 1000)
				AND
					T.driver_id = u.user_id
			)
		<if test="transmissionTypeIdList != null">
	   	AND
	   		UI.drive_transmission_type_id IN
	   		<foreach item="item" index="index" collection="transmissionTypeIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
	   	</if>   
        
	</select>
	
	<select id="getVendorDriverListForManualBookingRideLater" resultMap="userProfileResultMap">
	
		SELECT 
			u.user_id, u.email, UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,
			u.created_at,u.updated_at, u.photo_url,u.is_active,
			UI.credit, UI.referral_code, UI.is_first_time,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>		
		FROM 
			users u
		INNER JOIN user_info ui ON UI.user_id = u.user_id
		INNER JOIN user_account UA ON UA.user_id = UI.user_id
		INNER JOIN driver_vendors DV ON DV.driver_id = u.user_id
		INNER JOIN user_info DVUI ON DVUI.user_id = DV.vendor_id
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow!=null">
        INNER JOIN driver_subscription_package_history dsph 
        	ON 
        	(
        		dsph.driver_id = DG.driver_id
			<if test="vendorId != null">
        	AND
        		dsph.vendor_id = #{vendorId}
        	</if>
        	AND
        		dsph.package_start_time &lt;= #{time}
        	AND
        		dsph.package_end_time &gt;= #{time}
        	)
		</if>
        WHERE  
			u.role_id = #{driverRoleId}
		AND
			u.is_active = 'true' 
		AND
			u.is_on_duty = 'true'
		<if test="vendorId != null">
		AND 
			DV.vendor_id = #{vendorId} 
		</if>
		<if test="isRestrictDriverVendorSubscriptionExpiry!=null">
		AND
			DVUI.is_vendor_subscription_current_active = true 
		</if>
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow==null">
		AND
			UA.current_balance &gt;= #{minimumWalletAmount}
		</if>
		AND
			u.user_id IN 
				(
					SELECT
						DG.driver_id
					FROM 
						driver_gps DG 
					INNER JOIN users U ON U.user_id = DG.driver_id
					INNER JOIN user_info TUI ON TUI.user_id = DG.driver_id
					LEFT JOIN driver_tour_status DTS ON DTS.driver_id = DG.driver_id
					INNER JOIN driver_car_types DCT  ON  DCT.driver_id = DG.driver_id 
					WHERE 
					    DCT.car_type_id = #{carTypeId}
					AND
						is_on_duty = TRUE
					ORDER BY  
						${distance} ASC, DG.driver_id 
				)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = true
				AND
					ride_later_pickup_time &gt;= #{driverTripBeforeTime}
				AND
					ride_later_pickup_time &lt;= #{driverTripAfterTime}
				AND
					is_tour_ride_later = true
				AND
					driver_id = u.user_id
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = false
				AND
					created_at &gt;= #{driverTripBeforeTime}
				AND
					created_at &lt;= #{driverTripAfterTime}
				AND
					driver_id = u.user_id
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					T.driver_id
				FROM 
					tours T
				INNER JOIN rental_packages RP ON (RP.rental_package_id = T.rental_package_id)
				
				WHERE
					T.is_rental_booking = true
				AND
					T.created_at &gt;= #{driverTripBeforeTime}
				AND
					T.created_at &lt;= #{tourPickupTime} + ((RP.package_time * 60) * 1000)
				AND
					T.driver_id = u.user_id
			)
		<if test="transmissionTypeIdList != null">
	   	AND
	   		UI.drive_transmission_type_id IN
	   		<foreach item="item" index="index" collection="transmissionTypeIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
	   	</if> 
	   	  
	</select>
	
	<select id="getVendorRideLaterDriverListBySearch" resultMap="userProfileResultMap">
		
		SELECT 
			u.user_id,u.email,UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,
			u.created_at,u.updated_at, u.photo_url,u.is_active,
			UI.credit, UI.referral_code, UI.is_first_time,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>					   
		FROM 
			users u
		INNER JOIN user_info ui ON UI.user_id = u.user_id
		INNER JOIN driver_vendors DV ON DV.driver_id = u.user_id
		INNER JOIN user_info DVUI ON DVUI.user_id = DV.vendor_id
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow!=null">
        INNER JOIN driver_subscription_package_history dsph 
        	ON 
        	(
        		dsph.driver_id = u.user_id
        	<if test="vendorId!=null">
        	AND
        		dsph.vendor_id = #{vendorId}
        	</if>
        	AND
        		dsph.package_start_time &lt;= #{time}
        	AND
        		dsph.package_end_time &gt;= #{time}
        	)
		</if>
        WHERE  
            (
             		u.email iLIKE #{globalSearchString} 
               	OR 
               		UI.first_name iLIKE #{globalSearchString} 
		 		OR 
		 			UI.last_name iLIKE #{globalSearchString}
		 		OR 
		 			UI.company_name iLIKE #{globalSearchString} 
		 		OR 
		 			UI.company_address iLIKE #{globalSearchString}  
		 		OR 
		 			UI.phone_no iLIKE #{globalSearchString}
		 		OR 
		 			CONCAT(UI.first_name,CONCAT(' ',UI.last_name)) iLIKE #{globalSearchString} 
		 	) 
		AND 
			u.role_id = #{driverRoleId}
		AND
			u.is_active = 'true' 
	    AND
			u.is_on_duty = 'true'   
		<if test="vendorId != null">
		AND 
			DV.vendor_id = #{vendorId} 
		</if>
		<if test="isRestrictDriverVendorSubscriptionExpiry!=null">
		AND
			DVUI.is_vendor_subscription_current_active = true 
		</if>
		AND
			u.user_id NOT IN(SELECT driver_id from driver_tour_requests WHERE tour_id = #{tourId})
  	 	AND
			 u.user_id IN 
				(
					SELECT
						DG.driver_id
					FROM 
						driver_gps DG 
					INNER JOIN users U ON U.user_id = DG.driver_id
					INNER JOIN user_info TUI ON TUI.user_id = DG.driver_id
					LEFT JOIN driver_tour_status DTS ON DTS.driver_id = DG.driver_id
					INNER JOIN driver_car_types DCT  ON  DCT.driver_id = DG.driver_id 
					WHERE 
					    DCT.car_type_id = #{carTypeId}
					AND
						is_on_duty = TRUE
					ORDER BY  
						${distance} ASC, DG.driver_id 
				)
		AND 
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = true
				AND
					ride_later_pickup_time &gt;= #{driverTripBeforeTime}
				AND
					ride_later_pickup_time &lt;= #{driverTripAfterTime}
				AND
					is_tour_ride_later = true
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
	  	AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = false
				AND
					created_at &gt;= #{driverTripBeforeTime}
				AND
					created_at &lt;= #{driverTripAfterTime}
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					T.driver_id
				FROM 
					tours T
				INNER JOIN rental_packages RP ON (RP.rental_package_id = T.rental_package_id)
				
				WHERE
					T.is_rental_booking = true
				AND
					T.created_at &gt;= #{driverTripBeforeTime}
				AND
					T.created_at &lt;= #{tourPickupTime} + ((RP.package_time * 60) * 1000)
				AND
					T.driver_id = u.user_id
				AND
					T.tour_id != #{tourId}
			) 
		<if test="transmissionTypeIdList != null">
			AND
	    		UI.drive_transmission_type_id IN	    		
	    		<foreach item="item" index="index" collection="transmissionTypeIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
		</if>
		ORDER BY u.updated_at DESC
       	LIMIT #{recordOffset} OFFSET #{startOffSet}         
       
	</select>
	
	<select id="getVendorRideLaterDriverListCount" resultType="int"> 		
		
	    SELECT 
			count(u.user_id)
		FROM 
			users u
		INNER JOIN user_info ui ON ui.user_id = u.user_id
		INNER JOIN driver_vendors DV ON DV.driver_id = u.user_id
		INNER JOIN user_info DVUI ON DVUI.user_id = DV.vendor_id
		<if test="isVendorDriverSubscriptionAppliedInBookingFlow!=null">
        INNER JOIN driver_subscription_package_history dsph 
        	ON 
        	(
        		dsph.driver_id = u.user_id
        	<if test="vendorId!=null">
        	AND
        		dsph.vendor_id = #{vendorId}
        	</if>
        	AND
        		dsph.package_start_time &lt;= #{time}
        	AND
        		dsph.package_end_time &gt;= #{time}
        	)
		</if>
		WHERE 
			u.role_id = #{driverRoleId}
		AND
			u.is_active = 'true' 
		AND
			u.is_on_duty = 'true' 
		<if test="vendorId != null">
		AND 
			DV.vendor_id = #{vendorId} 
		</if>
		<if test="isRestrictDriverVendorSubscriptionExpiry!=null">
		AND
			DVUI.is_vendor_subscription_current_active = true 
		</if>
		AND
			u.user_id NOT IN(SELECT driver_id from driver_tour_requests WHERE tour_id = #{tourId})
     	AND
			u.user_id IN 
				(
					SELECT
						DG.driver_id
					FROM 
						driver_gps DG 
					INNER JOIN users U ON U.user_id = DG.driver_id
					INNER JOIN user_info UI ON UI.user_id = DG.driver_id
					LEFT JOIN driver_tour_status DTS ON DTS.driver_id = DG.driver_id
					INNER JOIN driver_car_types DCT  ON  DCT.driver_id = DG.driver_id 
					WHERE 
					    DCT.car_type_id = #{carTypeId}
					AND
						is_on_duty = TRUE
					ORDER BY  
						${distance} ASC, DG.driver_id 
				)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = true
				AND
					ride_later_pickup_time &gt;= #{driverTripBeforeTime}
				AND
					ride_later_pickup_time &lt;= #{driverTripAfterTime}
				AND
					is_tour_ride_later = true
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			)
		AND
			u.user_id NOT IN
			(
				SELECT 
					driver_id
				FROM 
					tours
				WHERE
					is_ride_later = false
				AND
					created_at &gt;= #{driverTripBeforeTime}
				AND
					created_at &lt;= #{driverTripAfterTime}
				AND
					driver_id = u.user_id
				AND
					tour_id != #{tourId}
			) 
		<if test="transmissionTypeIdList != null">
			AND
	    		ui.drive_transmission_type_id IN	    		
	    		<foreach item="item" index="index" collection="transmissionTypeIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
		</if>
	</select>
	
	<select id="getVendorListByRegion" resultMap="userProfileResultMap">
	
		SELECT
			DISTINCT u.user_id,u.email, concat(UI.first_name,' ',UI.last_name ) AS fullName,
			UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
		FROM 
			users u 
		INNER JOIN user_info ui ON u.user_id=UI.user_id
		LEFT JOIN multicity_user_region MUR ON MUR.user_id = UI.user_id
		WHERE 
			u.role_id = #{roleId}   
		<if test="assignedRegionList != null">
	    AND
	    	MUR.multicity_city_region_id IN
    		<foreach item="item" index="index" collection="assignedRegionList" open="(" separator="," close=")">
				#{item}
			</foreach>
	    </if>
	    
	</select>
	
	<select id="getVendorPassengerList" resultMap="userProfileResultMap">
	
		SELECT 
			DISTINCT u.user_id,u.email,UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,u.password,
			u.created_at,u.updated_at, u.photo_url,u.is_active, UI.company_name, UI.company_address, 
			UI.credit, UI.referral_code, UI.is_first_time, UI.is_verified,u.approvel_status,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
		FROM 
			users u
	    INNER JOIN user_info ui ON UI.user_id=u.user_id
		LEFT JOIN multicity_user_region MUR ON MUR.user_id = UI.user_id
	    <if test="vendorId != null">
		INNER JOIN driver_vendors DV ON DV.driver_id = U.user_id AND DV.vendor_id = #{vendorId} AND DV.role_id = #{roleId}
		</if>
	    WHERE  
			u.role_id = #{roleId}   
		<if test="assignedRegionList != null">
	    AND
	    	MUR.multicity_city_region_id IN
	    		<foreach item="item" index="index" collection="assignedRegionList" open="(" separator="," close=")">
					#{item}
				</foreach>
	    </if>
        
	</select>
	
	<update id="updateVendorDriverSubscriptionAppliedInBookingFlowFlag" parameterType="UserProfileModel">
		
		UPDATE
			users
		SET
			is_vendor_driver_subscription_applied_in_booking_flow = #{isVendorDriverSubscriptionAppliedInBookingFlow}
		WHERE
			user_id = #{userId}
		
	</update>
	
	<select id="getUserDriverSubscriptionByUserId" resultMap="userProfileResultMap">
	
		SELECT 
			u.user_id,u.email,ui.first_name, ui.last_name, ui.phone_no,ui.phone_no_code,u.password,
			u.created_at,u.updated_at, u.photo_url,u.is_active, ui.company_name, ui.company_address, 
			ui.credit, ui.referral_code, ui.is_first_time, ui.is_verified,u.approvel_status,
			concat(ui.first_name,' ',ui.last_name ) AS fullName,
			u.is_vendor_driver_subscription_applied_in_booking_flow, ds.priority_number AS driverPriorityNumber,
	    	(SELECT (count(ds.driver_subscriber_id)>0) FROM driver_subscribers ds WHERE ds.driver_id = ui.user_id AND ds.user_id = #{userId}) AS isDriverSubscribed
		FROM 
			user_info ui
		INNER JOIN driver_subscribers ds ON ds.driver_id=ui.user_id
	    INNER JOIN users u ON u.user_id=ui.user_id
	    WHERE  
	    	u.is_active = true
	    AND
        	ds.user_id = #{userId}
        AND
	    	(
            	u.email iLIKE #{searchKey} 
            OR 
            	ui.first_name iLIKE #{searchKey} 
	 		OR 
	 			ui.last_name iLIKE #{searchKey}
	 		OR 
	 			ui.phone_no iLIKE #{searchKey}
	 		OR 
	 			CONCAT(ui.first_name,CONCAT(' ',ui.last_name)) iLIKE #{searchKey} 
		 	) 
        ORDER BY ds.priority_number ASC, ui.first_name ASC
        LIMIT #{length} OFFSET #{start}
        
	</select>
	
	<select id="getVendorBrandList" resultMap="userProfileResultMap">
	
		SELECT 
			u.user_id,u.email,UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,u.password,
			u.created_at,u.updated_at, u.photo_url,u.is_active, UI.company_name, UI.company_address, 
			UI.credit, UI.referral_code, UI.is_first_time, UI.is_verified,u.approvel_status,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
			s.service_name, s.service_id, 
			c.category_id, c.category_name,
	    	<include refid="vendorNewColumns"></include>,
	    	<include refid="vendorStoreColumns"></include>,
	    	<include refid="vendorStoreTimingsColumns"></include>,
	    	<if test="considerDistance!=null">
	    	${distance} as distance, 
	    	</if>
	    	(SELECT (count(vsub.vendor_subscriber_id)>0) FROM vendor_subscribers vsub WHERE vsub.vendor_store_id = vs.vendor_store_id AND vsub.user_id = #{loggedInUserId}) AS isVendorStoreSubscribed
		FROM 
			user_info UI
	    INNER JOIN users u ON u.user_id=UI.user_id AND u.is_active = true
	    INNER JOIN vendor_service_categories vsc ON vsc.vendor_id=UI.user_id
	    INNER JOIN services s ON s.service_id = vsc.service_id AND s.is_active = true
	    INNER JOIN categories c ON c.category_id = vsc.category_id AND c.is_active = true
	    INNER JOIN vendor_stores vs ON (vs.vendor_id = UI.user_id AND vs.is_active = TRUE AND vs.is_deleted = FALSE)
	    INNER JOIN multicity_city_region mcr ON (mcr.multicity_city_region_id = vs.multicity_city_region_id AND mcr.is_active = TRUE AND mcr.is_deleted = FALSE)
	    LEFT JOIN vendor_store_timings vst ON (vst.vendor_store_id = vs.vendor_store_id AND vst.day = #{currentDayOfWeekValue})
	    <if test="isVendorStoreSubscribed!=null">
	    INNER JOIN vendor_subscribers vsub ON (vsub.vendor_store_id = vs.vendor_store_id AND vsub.user_id = #{loggedInUserId})
	    </if>
	    WHERE  
	    	vsc.service_id = #{serviceId}
	    <if test="categoryId!=null">
	    AND
	    	vsc.category_id = #{categoryId}
	    </if>
	    <if test="multicityCityRegionId!=null">
	    AND
	    	mcr.multicity_city_region_id = #{multicityCityRegionId}
        </if>
        AND
	    	(
	 			UI.vendor_brand_name iLIKE #{searchKey}
	 		OR 
	 			UI.vendor_brand_search_keywords iLIKE #{searchKey}
		 	OR
		 		vs.store_name iLIKE #{searchKey}
		 	OR
		 		vs.store_address iLIKE #{searchKey}
		 	OR
		 		s.service_name iLIKE #{searchKey}
		 	OR
		 		c.category_name iLIKE #{searchKey}
		 	) 
		<if test="considerDistance!=null">
		AND
	   		${latAndLong}
        ORDER BY ${distance} ASC, vs.store_name ASC
        </if>
        <if test="considerDistance==null">
        ORDER BY vsub.created_at DESC, vs.store_name ASC
        </if>
        <if test="length>0">
        LIMIT #{length} OFFSET #{start}
        </if>
        
	</select>
	
	<select id="getDriverListForSearch" resultMap="userProfileResultMap">
	
		SELECT 
		 	U.user_id, U.email, U.photo_url, U.is_active, UI.agent_number,
		 	concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.phone_no, UI.phone_no_code, UI.driving_license, UI.company_driver, ds.priority_number AS driverPriorityNumber,
	    	(SELECT (count(ds.driver_subscriber_id)>0) FROM driver_subscribers ds WHERE ds.driver_id = UI.user_id AND ds.user_id = #{loggedInuserId}) AS isDriverSubscribed
	    FROM
	   		users U 
   		INNER JOIN user_info UI ON UI.user_id=U.user_id
   		LEFT JOIN driver_subscribers ds ON ds.driver_id=UI.user_id
		WHERE 		  	
        	(
        	 	UI.phone_no iLIKE #{searchKey} 
        	)
        AND 
        	U.role_id = #{roleId}
        AND 
        	U.is_deleted='FALSE' 
        ORDER BY UI.first_name ASC
       	LIMIT #{length} OFFSET #{start}
       	
	</select>
	
	<select id="getVendorListByServiceTypeId" parameterType="map" resultMap="userProfileResultMap">
		
		SELECT 
			DISTINCT UI.user_id, UI.first_name, UI.last_name, UI.vendor_brand_name, 
			<include refid="vendorNewColumns"></include>		   
		FROM 
			user_info UI
		INNER JOIN users U ON U.user_id = UI.user_id
		INNER JOIN vendor_service_categories vsc ON vsc.vendor_id = UI.user_id
		INNER JOIN services s ON s.service_id = vsc.service_id
		INNER JOIN categories c ON c.category_id = vsc.category_id
		LEFT JOIN multicity_user_region MUR ON MUR.user_id = UI.user_id
        WHERE  
			U.role_id = #{roleId}
		AND
			U.is_active = TRUE
		AND
			U.is_deleted = FALSE  
		<if test="serviceTypeId!=null">
		AND
			s.service_type_id IN 
			<foreach item="item" index="index" collection="serviceTypeId" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="assignedRegionList!=null">
	    AND
	    	MUR.multicity_city_region_id IN
    		<foreach item="item" index="index" collection="assignedRegionList" open="(" separator="," close=")">
				#{item}
			</foreach>
	    </if>
		ORDER BY ${order} ASC
        
	</select>
	
	<select id="getUserDetailsForGorupOfIds" resultMap="userProfileResultMap">
		
		SELECT 
			U.user_id, U.email, U.photo_url, 
	    	UI.first_name, UI.last_name, U.role_id,
	    	UI.phone_no, UI.phone_no_code
		FROM 
			users U
		INNER JOIN user_info UI ON U.user_id = UI.user_id
        WHERE  
			U.is_active = TRUE
		AND
			U.is_deleted = FALSE  
		<if test="userIds!=null">
	    AND
	    	U.user_id IN
    		<foreach item="item" index="index" collection="userIds" open="(" separator="," close=")">
				#{item}
			</foreach>
	    </if>
        
	</select>
	
	<update id="updateVendorMonthlySubscriptionHistoryId" parameterType="UserProfileModel">
		
		UPDATE
			user_info
		SET
			vendor_monthly_subscription_history_id = #{vendorMonthlySubscriptionHistoryId}
		WHERE
			user_id = #{userId}
		
	</update>
	
	<update id="updateVendorMonthlySubscriptionParameters" parameterType="UserProfileModel">
		
		UPDATE
			user_info
		SET
			is_vendor_subscription_free_active = #{isVendorSubscriptionFreeActive},
			is_vendor_subscription_current_active = #{isVendorSubscriptionCurrentActive},
			vendor_current_subscription_start_date_time = #{vendorCurrentSubscriptionStartDateTime},
			vendor_current_subscription_end_date_time = #{vendorCurrentSubscriptionEndDateTime},
			vendor_monthly_subscription_history_id = #{vendorMonthlySubscriptionHistoryId},
			is_vendor_subscription_marked_expired_by_cronjob = #{isVendorSubscriptionMarkedExpiredByCronJob},
			vendor_subscription_marked_expired_by_cronjob_timing = #{vendorSubscriptionMarkedExpiredByCronJobTiming}
		WHERE
			user_id = #{userId}
		
	</update>
	
	<update id="updateVendorMonthlySubscriptionScriptParametersExistingVendors" parameterType="UserProfileModel">
		
		UPDATE
			user_info
		SET
			is_vendor_subscription_free_active = #{isVendorSubscriptionFreeActive},
			is_vendor_subscription_current_active = #{isVendorSubscriptionCurrentActive},
			vendor_free_subscription_start_date_time = #{vendorFreeSubscriptionStartDateTime},
			vendor_free_subscription_end_date_time = #{vendorFreeSubscriptionEndDateTime},
			vendor_current_subscription_start_date_time = #{vendorCurrentSubscriptionStartDateTime},
			vendor_current_subscription_end_date_time = #{vendorCurrentSubscriptionEndDateTime}
		WHERE
			user_id = #{userId}
		
	</update>
	
	<update id="updateVendorSubscriptionAccountExpired" parameterType="ArrayList">
	
		<foreach collection="updateAccountToExpiredList" item="model" separator=";">
		
			UPDATE
				user_info
			SET
				is_vendor_subscription_current_active = #{model.isVendorSubscriptionCurrentActive},
				is_vendor_subscription_marked_expired_by_cronjob = #{model.isVendorSubscriptionMarkedExpiredByCronJob},
				vendor_subscription_marked_expired_by_cronjob_timing = #{model.vendorSubscriptionMarkedExpiredByCronJobTiming}
			WHERE
				user_id = #{model.userId}
		    	
		</foreach>
	
	</update>
	
	<select id="getVendorListForVendorSubscriptionExpiry" parameterType="map" resultMap="userProfileResultMap">
	
		SELECT 
		 	U.user_id, U.email, U.photo_url, 
		 	concat(UI.first_name,' ',UI.last_name ) AS fullName,
	    	UI.phone_no, UI.phone_no_code, UI.driving_license, UI.credit, UI.referral_code, UI.is_first_time,
	    	U.is_vendor_driver_subscription_applied_in_booking_flow,
	    	<include refid="vendorNewColumns"></include>
	    FROM
	   		users U INNER JOIN user_info UI ON UI.user_id=U.user_id
		WHERE 		  	
        	U.role_id = #{roleId}
        AND 
        	U.is_deleted = 'FALSE' 
<!--         AND -->
<!--         	UI.vendor_current_subscription_end_date_time &gt;= #{currentTime} -->
        AND
       		UI.vendor_current_subscription_end_date_time &lt;= #{next3Days}
       	AND
       		UI.is_vendor_subscription_marked_expired_by_cronjob = false
       		
	</select>
	
	<insert id="insertMartUser" parameterType="UserProfileModel">

		INSERT INTO user_info
				(
					user_info_id, first_name, last_name, phone_no, phone_no_code, user_id,
					created_by,created_at,updated_by,updated_at			
				)
		VALUES
				(
					#{userInfoId}, #{firstName}, #{lastName}, #{phoneNo}, #{phoneNoCode}, #{userId},
					#{createdBy},#{createdAt},#{updatedBy},#{updatedAt}
				)
				
	</insert>
	
	<select id="getVendorBrandStoresList" resultMap="userProfileResultMap">
	
		SELECT 
			u.user_id,u.email,UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,u.password,
			u.created_at,u.updated_at, u.photo_url,u.is_active, UI.company_name, UI.company_address, 
			UI.credit, UI.referral_code, UI.is_first_time, UI.is_verified,u.approvel_status,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
			s.service_name, s.service_id, 
			c.category_id, c.category_name,
	    	<include refid="vendorNewColumns"></include>,
	    	<include refid="vendorStoreColumns"></include>,
	    	<include refid="vendorStoreTimingsColumns"></include>,
	    	<if test="considerDistance!=null">
	    	${distance} as distance, 
	    	</if>
	    	(SELECT (count(vsub.vendor_subscriber_id)>0) FROM vendor_subscribers vsub WHERE vsub.vendor_store_id = vs.vendor_store_id AND vsub.user_id = #{loggedInUserId}) AS isVendorStoreSubscribed
		FROM 
			user_info UI
	    INNER JOIN users u ON u.user_id=UI.user_id AND u.is_active = true
	    INNER JOIN vendor_service_categories vsc ON vsc.vendor_id=UI.user_id
	    INNER JOIN services s ON s.service_id = vsc.service_id AND s.is_active = true
	    INNER JOIN categories c ON c.category_id = vsc.category_id AND c.is_active = true
	    INNER JOIN vendor_stores vs ON (vs.vendor_id = UI.user_id AND vs.is_active = TRUE AND vs.is_deleted = FALSE)
	    INNER JOIN multicity_city_region mcr ON (mcr.multicity_city_region_id = vs.multicity_city_region_id AND mcr.is_active = TRUE AND mcr.is_deleted = FALSE)
	    LEFT JOIN vendor_store_timings vst ON (vst.vendor_store_id = vs.vendor_store_id AND vst.day = #{currentDayOfWeekValue})
	    <!-- <if test="isVendorStoreSubscribed!=null">
	    INNER JOIN vendor_subscribers vsub ON (vsub.vendor_store_id = vs.vendor_store_id AND vsub.user_id = #{loggedInUserId})
	    </if> -->
	    WHERE  
	    	vsc.service_id = #{serviceId}
	    AND 
	    	vs.vendor_id = #{vendorId}	
	    <if test="multicityCityRegionId!=null">
	    AND
	    	mcr.multicity_city_region_id = #{multicityCityRegionId}
        </if>
		<if test="considerDistance!=null">
		<!-- AND
	   		${latAndLong} -->
        ORDER BY ${distance} ASC, vs.store_name ASC
        </if>
        <if test="considerDistance==null">
        ORDER BY vsub.created_at DESC, vs.store_name ASC
        </if>
        
        
	</select>
	
	<select id="getVendorStoresListForApiSearch" resultMap="userProfileResultMap">
	
		SELECT 
			u.user_id,u.email,UI.first_name, UI.last_name, UI.phone_no,UI.phone_no_code,u.password,
			u.created_at,u.updated_at, u.photo_url,u.is_active, UI.company_name, UI.company_address, 
			UI.credit, UI.referral_code, UI.is_first_time, UI.is_verified,u.approvel_status,
			u.is_vendor_driver_subscription_applied_in_booking_flow,
			s.service_name, s.service_id, 
			c.category_id, c.category_name,
	    	<include refid="vendorNewColumns"></include>,
	    	<include refid="vendorStoreColumns"></include>,
	    	<include refid="vendorStoreTimingsColumns"></include>,
	    	<if test="considerDistance!=null">
	    	${distance} as distance, 
	    	</if>
	    	(SELECT (count(vsub.vendor_subscriber_id)>0) FROM vendor_subscribers vsub WHERE vsub.vendor_store_id = vs.vendor_store_id AND vsub.user_id = #{loggedInUserId}) AS isVendorStoreSubscribed
		FROM 
			user_info UI
	    INNER JOIN users u ON u.user_id=UI.user_id AND u.is_active = true
	    INNER JOIN vendor_service_categories vsc ON vsc.vendor_id=UI.user_id
	    INNER JOIN services s ON s.service_id = vsc.service_id AND s.is_active = true
	    INNER JOIN categories c ON c.category_id = vsc.category_id AND c.is_active = true
	    INNER JOIN vendor_stores vs ON (vs.vendor_id = UI.user_id AND vs.is_active = TRUE AND vs.is_deleted = FALSE)
	    INNER JOIN multicity_city_region mcr ON (mcr.multicity_city_region_id = vs.multicity_city_region_id AND mcr.is_active = TRUE AND mcr.is_deleted = FALSE)
	    LEFT JOIN vendor_store_timings vst ON (vst.vendor_store_id = vs.vendor_store_id AND vst.day = #{currentDayOfWeekValue})
	    <if test="isVendorStoreSubscribed!=null">
	    INNER JOIN vendor_subscribers vsub ON (vsub.vendor_store_id = vs.vendor_store_id AND vsub.user_id = #{loggedInUserId})
	    </if>
	   	WHERE
		    	(
		 			UI.vendor_brand_name iLIKE #{searchKey}
		 		OR 
		 			UI.vendor_brand_search_keywords iLIKE #{searchKey}
			 	OR
			 		vs.store_name iLIKE #{searchKey}
			 	)
	    <if test="multicityCityRegionId!=null">
	    AND
	    	mcr.multicity_city_region_id = #{multicityCityRegionId}
        </if>
         
		<if test="considerDistance!=null">
		AND
	   		${latAndLong}
        ORDER BY ${distance} ASC, vs.store_name ASC
        </if>
        <if test="considerDistance==null">
        ORDER BY vsub.created_at DESC, vs.store_name ASC
        </if>
        <if test="length>0">
        LIMIT #{length} OFFSET #{start}
        </if>
        
	</select>
	
</mapper>