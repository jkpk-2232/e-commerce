<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webapp.daos.ApnsMessageDao">

	<resultMap type="ApnsMessageModel" id="apnsMessageModelResultMap">

		<id property="apnsMessageId" column="apns_notification_message_id" />
		<result property="fromUserId" column="from_user_id" />
		<result property="toUserId" column="to_user_id" />
		<result property="message" column="message" />
		<result property="messageType" column="message_type" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
		
		<result property="extraInfoType" column="extra_info_type" />
		<result property="extraInfoId" column="extra_info_id" />
				
	</resultMap>
	
	<sql id="ApnsMessageColumns">
		apns_notification_message_id, from_user_id, to_user_id, 
		message, message_type, created_at, updated_at,
		extra_info_type, extra_info_id
	</sql>

	<insert id="insertPushMessage" parameterType="ApnsMessageModel">
	
		INSERT INTO apns_notification_messages
			(
				apns_notification_message_id, from_user_id, to_user_id, 
				message, message_type, created_at, updated_at,
				extra_info_type, extra_info_id
			)
		VALUES
			(
				#{apnsMessageId}, #{fromUserId}, #{toUserId}, 
				#{message}, #{messageType}, #{createdAt}, #{updatedAt},
				#{extraInfoType}, #{extraInfoId}
			)
		
	</insert>
	
	<insert id="insertMultiplePushMessage" keyColumn="apns_notification_message_id" useGeneratedKeys="true" parameterType="List" >
			
		INSERT INTO apns_notification_messages
			(
				apns_notification_message_id, from_user_id, to_user_id, message, 
				message_type, created_at, updated_at, 
				extra_info_type, extra_info_id
			)
		VALUES
			<foreach collection="list" index="index" item="dataCore" separator="),(" open="(" close=")">	     	
				#{dataCore.apnsMessageId}, #{dataCore.fromUserId}, #{dataCore.toUserId}, #{dataCore.message}, 
				#{dataCore.messageType}, #{dataCore.createdAt}, #{dataCore.updatedAt}, 
				#{dataCore.extraInfoType}, #{dataCore.extraInfoId}
			</foreach>	
			
	 </insert>

	<select id="getAllNotificationsByUserId" parameterType="ApnsMessageModel" resultMap="apnsMessageModelResultMap">
	
		SELECT 
			<include refid="ApnsMessageColumns"></include>
		FROM 
			apns_notification_messages 
		WHERE 
		    is_deleted = FALSE
		AND     
		    to_user_id=#{toUserId} 
		AND 
		    created_at &gt; #{afterTime}
		ORDER BY apns_notification_messages.created_at 
		LIMIT  #{dataLimit}  OFFSET  #{offset} 
		 
	</select>
	
	<select id="getTotalNotificationCount" parameterType="map" resultType="int">
	
		SELECT 
			COUNT(*) 
		FROM 
			apns_notification_messages 
		WHERE  
		    is_deleted = FALSE   
		AND 
			to_user_id=#{userId}  
		AND 
			created_at &gt; #{afterTime}	
		      
	</select>
	
	<select id="getById" parameterType="String" resultMap="apnsMessageModelResultMap">
	
		SELECT 
			<include refid="ApnsMessageColumns"></include>
		FROM 
			apns_notification_messages 
		WHERE 
			apns_notification_message_id=#{apnsMessageId} 
	
	</select>
	
	<delete id="deleteNotificationById"  parameterType="ApnsMessageModel">
	
		UPDATE 
			apns_notification_messages 
		SET 
			is_deleted = TRUE, 
			updated_at = #{updatedAt} 
		WHERE 
			apns_notification_message_id = #{apnsMessageId}
	
	</delete>
	
	<delete id="deleteVendorFeedsByVendorFeedId"  parameterType="ApnsMessageModel">
		DELETE FROM apns_notification_messages WHERE extra_info_id = #{extraInfoId}
	</delete>
	
</mapper>