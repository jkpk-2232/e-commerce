<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webapp.daos.ReferralCodeLogsDao">

	<resultMap id="referralCodeLogsResultMap" type="ReferralCodeLogsModel" >
	    
	    <result property="referralCodeLogsId" column="referral_code_logs_id" />
		<result property="senderId" column="sender_id" />
		<result property="receiverId" column="receiver_id" />
		<result property="senderBenefit" column="sender_benefit" />
		<result property="receiverBenefit" column="receiver_benefit" />
		
		<result property="recordStatus" column="record_status" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
		<result property="createdBy" column="created_by" />
		<result property="updatedBy" column="updated_by" />
		
		<result property="passengerName" column="passenger_name" />
		<result property="passengerPhoneNumber" column="passenger_phone_number" />
		
	</resultMap>

	<sql id="referralCodeLogsTableColsWithOutTypeAlias">
		referral_code_logs_id, sender_id, receiver_id, sender_benefit, 
        receiver_benefit, record_status, created_by, created_at, updated_by, 
        updated_at
	</sql>
	
	<insert id="addReferralCodeLogs" parameterType="ReferralCodeLogsModel">

		INSERT INTO 
			referral_code_logs
				(
            		referral_code_logs_id, sender_id, 
            		receiver_id, sender_benefit, receiver_benefit, 
            		record_status, created_by, created_at, updated_by, updated_at
            	)
	    VALUES 
		    	(
					#{referralCodeLogsId}, #{senderId}, 
					#{receiverId}, #{senderBenefit}, #{receiverBenefit},
					'A', #{createdBy}, #{createdAt}, #{updatedBy}, #{updatedAt}
				)
	</insert>
	
	<select id="getReferralCodeLogsByReceiverId" parameterType="String" resultMap="referralCodeLogsResultMap">
	
		SELECT 
			referral_code_logs_id, sender_id, 
            receiver_id, sender_benefit, receiver_benefit, 
            record_status, created_by, created_at, updated_by, updated_at
       	FROM
       		referral_code_logs
       	WHERE
       		receiver_id = #{userId}
       	AND
       		record_status = 'A'
       		
	</select>
	
	<select id="getTotalDriverReferralLogsCount" parameterType="map" resultType="int"> 		
		
	    SELECT 
			count(RCL.referral_code_logs_id)
			
		FROM 
			referral_code_logs RCL
			
		INNER JOIN 
		    	user_info UI 
		ON 
				UI.user_id = RCL.receiver_id
			
		WHERE 
			RCL.created_at &gt; #{startDate}
		AND
			RCL.created_at &lt; #{endDate}
			
		<if test="senderId != null">
		AND
			RCL.sender_id = #{senderId}	
		</if>
		
	</select>
	
	<select id="getReferralLogsListForSearch"  parameterType="map"  resultMap="referralCodeLogsResultMap">
		
		SELECT 
			RCL.referral_code_logs_id, RCL.sender_id, RCL.receiver_id, RCL.sender_benefit, RCL.receiver_benefit, 
            RCL.record_status, RCL.created_by, RCL.created_at, RCL.updated_by, RCL.updated_at,
            CONCAT(UI.first_name,CONCAT(' ',UI.last_name)) AS passenger_name,
            CONCAT(UI.phone_no_code,CONCAT(' ',UI.phone_no)) AS passenger_phone_number
		FROM 
			referral_code_logs RCL
			
		INNER JOIN 
		    	user_info UI 
		ON 
				UI.user_id = RCL.receiver_id
			
        WHERE  
                  (
                  		UI.first_name iLIKE #{globalSearchString} 
			 		OR 
			 			UI.last_name iLIKE #{globalSearchString} 
			 		OR 
			 			UI.phone_no iLIKE #{globalSearchString}
			 		OR 
			 			UI.phone_no_code iLIKE #{globalSearchString}
			 		OR 
			 			CONCAT(UI.first_name,CONCAT(' ',UI.last_name)) iLIKE #{globalSearchString} 
			 		OR 
			 			CONCAT(UI.phone_no_code,CONCAT(' ',UI.phone_no)) iLIKE #{globalSearchString}
			 		OR 
			 			CAST (RCL.sender_benefit AS character varying) iLIKE #{globalSearchString}
			 		OR 
			 			CAST (RCL.receiver_benefit AS character varying) iLIKE #{globalSearchString}
			 		) 
		AND 
			RCL.created_at &gt; #{startDate}
		AND
			RCL.created_at &lt; #{endDate}
			
		<if test="senderId != null">
		AND
			RCL.sender_id = #{senderId}	
		</if>
	    
		ORDER BY RCL.updated_at DESC
		
        LIMIT  #{length}  OFFSET  #{start}        
        
	</select>

</mapper> 